//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Inputs/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e352bd1d-da49-48a0-8862-f0dd650ac87a"",
            ""actions"": [
                {
                    ""name"": ""MovementAxis"",
                    ""type"": ""Value"",
                    ""id"": ""fdfa6493-f202-4211-919f-f31931dd459c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AttackAxis"",
                    ""type"": ""Value"",
                    ""id"": ""615cc076-6751-4b8d-ad36-d7ce0cc2c459"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementApply"",
                    ""type"": ""Button"",
                    ""id"": ""d56df4e4-6753-41b5-b3fb-9e2d2e15d305"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackApply"",
                    ""type"": ""Button"",
                    ""id"": ""bdd052c5-dc3c-46da-b674-2edfb802704d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""4c806ca4-06f9-4567-b267-ff5e8ae6c8f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""110c2d19-54ab-48fe-8ba2-adfa1995a070"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81784cf0-4871-4abd-a724-6874be8bdd4c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c90f708f-bdbe-4c41-bd55-952cdd8f6f9e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementApply"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df7f62b9-d120-4592-ad42-e444bdb93e8c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackApply"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c638991-4f26-41cf-a948-ac703f952cfd"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MovementAxis = m_Player.FindAction("MovementAxis", throwIfNotFound: true);
        m_Player_AttackAxis = m_Player.FindAction("AttackAxis", throwIfNotFound: true);
        m_Player_MovementApply = m_Player.FindAction("MovementApply", throwIfNotFound: true);
        m_Player_AttackApply = m_Player.FindAction("AttackApply", throwIfNotFound: true);
        m_Player_Run = m_Player.FindAction("Run", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_MovementAxis;
    private readonly InputAction m_Player_AttackAxis;
    private readonly InputAction m_Player_MovementApply;
    private readonly InputAction m_Player_AttackApply;
    private readonly InputAction m_Player_Run;
    public struct PlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementAxis => m_Wrapper.m_Player_MovementAxis;
        public InputAction @AttackAxis => m_Wrapper.m_Player_AttackAxis;
        public InputAction @MovementApply => m_Wrapper.m_Player_MovementApply;
        public InputAction @AttackApply => m_Wrapper.m_Player_AttackApply;
        public InputAction @Run => m_Wrapper.m_Player_Run;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @MovementAxis.started += instance.OnMovementAxis;
            @MovementAxis.performed += instance.OnMovementAxis;
            @MovementAxis.canceled += instance.OnMovementAxis;
            @AttackAxis.started += instance.OnAttackAxis;
            @AttackAxis.performed += instance.OnAttackAxis;
            @AttackAxis.canceled += instance.OnAttackAxis;
            @MovementApply.started += instance.OnMovementApply;
            @MovementApply.performed += instance.OnMovementApply;
            @MovementApply.canceled += instance.OnMovementApply;
            @AttackApply.started += instance.OnAttackApply;
            @AttackApply.performed += instance.OnAttackApply;
            @AttackApply.canceled += instance.OnAttackApply;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @MovementAxis.started -= instance.OnMovementAxis;
            @MovementAxis.performed -= instance.OnMovementAxis;
            @MovementAxis.canceled -= instance.OnMovementAxis;
            @AttackAxis.started -= instance.OnAttackAxis;
            @AttackAxis.performed -= instance.OnAttackAxis;
            @AttackAxis.canceled -= instance.OnAttackAxis;
            @MovementApply.started -= instance.OnMovementApply;
            @MovementApply.performed -= instance.OnMovementApply;
            @MovementApply.canceled -= instance.OnMovementApply;
            @AttackApply.started -= instance.OnAttackApply;
            @AttackApply.performed -= instance.OnAttackApply;
            @AttackApply.canceled -= instance.OnAttackApply;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMovementAxis(InputAction.CallbackContext context);
        void OnAttackAxis(InputAction.CallbackContext context);
        void OnMovementApply(InputAction.CallbackContext context);
        void OnAttackApply(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
}
